---
# - name: Template ACM resources 
#   template:
#     src: "acm-cluster-create.yaml.j2"
#     dest: "acm-cluster-create.yaml"

# - name: Template OpenShift install config
#   template:
#     src: "install-config.yaml.j2"
#     dest: "install-config.yaml"

# - name: Create {{ project_name }} namespace
#   kubernetes.core.k8s:
#     api_key: "{{ openshift_service_account }}"
#     host: "{{ openshift_server }}"
#     api_version: project.openshift.io/v1
#     kind: Project
#     name: "{{ cluster_name }}"
#     state: present

# - name: Login with openshift
#   shell:
#     cmd: oc login --token="{{ openshift_service_account }}" --server="{{ openshift_server }}"

# - name: Navigate to ansible-automation-platform namespace
#   shell:
#     cmd: oc project ansible-automation-platform

# - name: Create secret from the install-config template
#   shell:
#     cmd: oc create secret generic {{ cluster_name }}-install-config --from-file=install-config.yaml=install-config.yaml -n "{{ cluster_name }}"

# - name: Create cluster resources for ACM
#   shell:
#     cmd: oc apply -f acm-cluster-create.yaml
      

- name: Install RHSSO Operator
  k8s:
    definition: "{{ lookup('kubernetes.core.kustomize', dir='acm_cluster/files/rhsso-operator/base') }}"  

- name: Wait until the Operator is ready
  k8s_info:
    kind: Subscription
    api_version: operators.coreos.com/v1alpha1
    wait: yes
    name: rhsso-operator
    namespace: sso
    wait_condition:
      type: CatalogSourcesUnhealthy
      status: False

# - name: Create Keycloak instance
#   k8s:
#     state: present
#     name: keycloak_instance
#     namespace: sso
#     definition:
#       kind: Keycloak
#       apiVersion: keycloak.org/v1alpha1
#       metadata:
#         name: "{{ cluster_name }}-keycloak"
#         labels:
#           app: sso
#         namespace: sso
#       spec:
#         instances: 1
#         externalAccess:
#           enabled: true

# - name: Wait until Keycloak is ready 
#   k8s_info:
#     kind: Pod
#     api_version: v1
#     wait: yes
#     name: keycloak-0
#     namespace: sso
#     wait_condition:
#       type: Ready
#       status: 'True'

# - name: Create Keycloak Realm
#   k8s:
#     state: present
#     name: openshift-realm
#     namespace: sso
#     definition:
#       kind: KeycloakRealm
#       apiVersion: keycloak.org/v1alpha1
#       spec:
#         instanceSelector:
#           matchLabels:
#             app: sso
#         realm:
#           clients:
#             - enabled: true
#               clientAuthenticatorType: client-secret
#               redirectUris:
#                 - >-
#                   https://oauth-openshift.apps.{{ cluster_name }}.dragonslair.dev/oauth2callback/myapp
#               clientId: openshift
#               implicitFlowEnabled: false
#               secret: "{{ keycloak_client_secret }}"
#               publicClient: false
#               standardFlowEnabled: true
#               directAccessGrantsEnabled: false
#           displayName: openshift
#           enabled: true
#           id: openshift
#           identityProviders:
#             - alias: github
#               config:
#                 clientId: "{{ oauth_client_id }}"
#                 clientSecret: "{{ oauth_client_secret }}"
#                 syncMode: IMPORT
#                 useJwksUrl: 'true'
#               enabled: true
#               firstBrokerLoginFlowAlias: first broker login
#               providerId: github
#           realm: openshift

# - name: Create secret from Keycloak Client
#   k8s:
#     state: present
#     definition:
#       apiVersion: v1
#       data:
#         clientSecret: "{{ keycloak_client_secret | b64encode }}"
#       kind: Secret
#       metadata:
#         name: openid-client-secret
#         namespace: openshift-config
#       type: Opaque

- name: Get tls.crt from router-ca
  k8s_info:
    api_version: v1
    kind: Secret
    name: router-ca
    namespace: openshift-ingress-operator
  register: router_ca_secret

# - name: Create ConfigMap from tls.crt
#   k8s:
#     state: present
#     kind: ConfigMap
#     namespace: openshift-config
#     definition:
#       apiVersion: v1
#       metaace: openshift-config
#       data:
#         ca.crt: |
#           tls_crt.resources.data.tls.crt




- name: Get the original cred secrets
  set_fact:
    tls_crt: "{{ item.data }}"
  with_items: "{{ router_ca_secret.resources }}"

- name: debug
  debug:
    var: tls_crt

